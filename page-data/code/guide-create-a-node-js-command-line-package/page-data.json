{
    "componentChunkName": "component---src-pages-markdown-remark-frontmatter-slug-tsx",
    "path": "/code/guide-create-a-node-js-command-line-package/",
    "result": {"data":{"markdownRemark":{"html":"<p><img src=\"/images/code/guide-creating-node-cli-app-cover.jpg\" alt=\"Lego\">\n<a href=\"https://www.flickr.com/photos/samdney/26458391651/\">Photo by: Carolin Zöbelein</a></p>\n<p>Feeling inspired to create a NodeJS command-line script to solve a specific issue? Do you want to ship it as an installable package? That should be simple, right? Fortunately, it is!</p>\n<p>Here is a concise guide on things you should do to create a NodeJS command-line package. This guide will walk you through the <strong>creation</strong>, <strong>mapping</strong> and <strong>linking</strong> of a NodeJS command-line script.</p>\n<h2>1. Create a NodeJS package</h2>\n<p>Before doing anything else, we need to create NodeJS package: a directory containing a <code class=\"language-text\">package.json</code> file. We can do that in 2 simple steps.</p>\n<ol>\n<li>Create an empty directory.</li>\n<li>Run: <code class=\"language-text\">npm init</code> from inside the new directory.</li>\n</ol>\n<p>That is nothing new, nor specific to creating a NodeJS command-line package as it is the starting point of any NodeJS package. Now that we have that let us create what will be our NodeJS command-line script.</p>\n<h2>2. Create a NodeJS command-line script</h2>\n<p>You may already know that we can execute a NodeJS script file by running: node script.js. That is fine in most cases, but a NodeJS command-line script is a regular JavaScript file, except that it contains a special shell-instruction. More about that shortly; first let us create a JavaScript file that will become the NodeJS command-line script.</p>\n<h3>Create a JavaScript file</h3>\n<p>The <a href=\"https://docs.npmjs.com/files/package.json#bin\">npm.js docs</a> and popular NodeJS projects use to name JavaScript command-line file as <code class=\"language-text\">cli.js</code>. This can be considered a good practice because the name alone tells the purpose of the file. However, you can name it however you want.</p>\n<h3>Convert the JavaScript file into a NodeJS command-line script</h3>\n<p>Similar as other shell script, we want to make our JavaScript file executable by the locally installed node program. We do that adding a <a href=\"https://en.wikipedia.org/wiki/Shebang_(Unix)\">shebang character sequence</a> at the very top of our JavaScript file that look as follow:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token shebang important\">#!/usr/bin/env node</span></code></pre></div>\n<p>That way, we are telling *nix systems that the interpreter of our JavaScript file should be <code class=\"language-text\">/usr/bin/env</code> node which looks up for the locally-installed <code class=\"language-text\">node</code> executable.</p>\n<p>In Windows, that line will just be ignored because it will be interpreted as a comment, but <strong>it has to be there</strong> because <code class=\"language-text\">npm</code> will read it on a Windows machine when the NodeJS command-line package is being installed.</p>\n<h3>Make the JavaScript command-line file executable</h3>\n<p>In most cases, new files are not allowed to be executed. As we are creating a NodeJS command-line script that <em>will be executed</em>, we need to modify its file permissions. In a *nix system you can do that as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">chmod</span> +x cli.js <span class=\"token comment\"># Make the file executable</span></code></pre></div>\n<p>Now, let’s add some code to our script file. We will create a simple Hello World that will also print any provided arguments.</p>\n<h3>Add code to our NodeJS command-line script file</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token hashbang comment\">#!/usr/bin/env node</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello world!'</span><span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span>argv<span class=\"token punctuation\">)</span></code></pre></div>\n<p>This simple script prints out <em>Hello world!</em> and any provided command line argument.</p>\n<p><strong>Awesome!</strong> Now we can run it on Linux or Mac OS X as <code class=\"language-text\">./cli.js</code> or in Windows with <code class=\"language-text\">node.cmd cli.js</code>. Try it! Also, pass some argument to it.</p>\n<p><img src=\"/images/code/guide-creating-node-cli-app-cover-hello-world.png\" alt=\"Running a basic NodeJS command-line script that outputs provided arguments.\"></p>\n<p>So far, we can run our NodeJS command-line file as a regular script in Linux and Mac OS X, but with still need to add <code class=\"language-text\">node.cmd</code> in Windows. Also, we are bound with the filename to execute our command-line script, which is not nice. In the next section we will circumvent those issues.</p>\n<h2>3. Map a command-line script to a command name</h2>\n<p>So far, we converted a JavaScript file into a NodeJS command-line script file. However, we want to give it a more meaningful name that does not need to be the name of the NodeJS command-line script file. For that, we have to map our command-line script by configuring our <code class=\"language-text\">package.json</code>. About this topic the <a href=\"https://docs.npmjs.com/files/package.json#bin\">npmjs.com docs</a> says:</p>\n<blockquote>\n<p>supply a <code class=\"language-text\">bin</code> field in your <code class=\"language-text\">package.json</code> which is a map of command name to local file name.</p>\n</blockquote>\n<p>This mean we can specify a <em>‘command name’</em> for our local <em>‘command-line script’</em>. Let say we want our <code class=\"language-text\">cli.js</code> command-line file to be mapped to <code class=\"language-text\">say-hello</code>. We can do that by modifying our <code class=\"language-text\">package.json</code> and adding a <code class=\"language-text\">bin</code> field as aforementioned:</p>\n<p><img src=\"/images/code/guide-creating-node-cli-app-cover-bin-field.png\" alt=\"Adding a bin field to our package.json file to map a command-line script file.\"></p>\n<p>To see its full potential, we are assigning to the bin field an object where the keys become the command names, and the values are the <em>NodeJS command-line script files</em> mapped. That format allows us as developers to provide more than one script mapping. However, if we want to provide a single NodeJS command-line script with the same name as its file, we could just set a string instead of an object where the string would be the local file path.</p>\n<h3>Important note on naming a command</h3>\n<p>We can choose any name for a command, but we do not want it to clash with existing popular command names such as <code class=\"language-text\">ls</code>, <code class=\"language-text\">cd</code>, <code class=\"language-text\">dir</code> and so on. If we use one existing name chances are it will not be executed, but instead the already installed one (results may vary).</p>\n<h2>4. Link your command for development</h2>\n<p>As developers, sanity is more than just a word; it is life. That is why we need to be confident enough on how our NodeJS command-line script will be shipped as a package. Thankfully, <code class=\"language-text\">npm</code> comes with the <code class=\"language-text\">link</code> command that will provide our regular dose of sanity.</p>\n<p>The <code class=\"language-text\">npm link</code> command allow us to locally <em>‘symlink a package folder’</em>, and for our needs, it will locally install any command listed in the bin field of our package.json. <strong>In other words, <code class=\"language-text\">npm link</code> is like a NodeJS package installation simulator</strong>. It is worth to mention that <code class=\"language-text\">npm</code> link has a wider usage that exceeds the scope of this guide.</p>\n<p>The <code class=\"language-text\">npm link</code> command is used from within the NodeJS package directory we want to symlink:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> <span class=\"token function\">link</span></code></pre></div>\n<p>Once executed, we will see our command being symlinked globally. Now, we can execute our NodeJS command-line script with its own <em>‘command name’</em> <code class=\"language-text\">say-hello</code>:</p>\n<p><img src=\"/images/code/guide-creating-node-cli-app-cover-npm-linked.png\" alt=\"Running a npm-linked command-line script.\"></p>\n<p>Pretty neat, right? That way, we can play with our NodeJS command-line script locally before even <code class=\"language-text\">npm publish</code>‘ing them.</p>\n<h3>Notes on npm link</h3>\n<p>Under the hood, <code class=\"language-text\">npm link</code> (also applies to <code class=\"language-text\">npm install</code>) symlink all files specified in the bin field of <code class=\"language-text\">package.json</code>. The npmjs docs add:</p>\n<blockquote>\n<p>On install, npm will symlink […] file[s] into <code class=\"language-text\">prefix/bin</code> for global installs, or <code class=\"language-text\">./node_modules/.bin/</code> for local installs.</p>\n</blockquote>\n<p>On *nix systems, the <code class=\"language-text\">npm</code> linking process is like creating a shortcut to our specified command file, which will be executed by the shell and then by <code class=\"language-text\">node</code> as specified with the shebang (<code class=\"language-text\">#!/usr/bin/env node</code>). While on Windows, <code class=\"language-text\">npm</code> will do the same (only if the shebang is specified) but will also create a <code class=\"language-text\">{command-name}.cmd</code> that calls <code class=\"language-text\">node</code> to execute our specified command file.</p>\n<h3>Keep your room clean</h3>\n<p>When we finish to test our <em>symlinked</em> command, we may want to remove it. We can achieve that by running the following code from inside the package directory.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">npm</span> unlink</code></pre></div>\n<h2>Conclusion</h2>\n<p>That is it for a concise guide on creating a NodeJS command-line package. With those four steps, we have the basics to ship a NodeJS package that will install a command-line package.</p>\n<p>Now, it is up to you to <em>commit</em>, <em>push</em> and <em>unleash</em> your creativity by coding a NodeJS command-line package. If you do so, please, <a href=\"/about/contact\">send me a message</a> in the comments with the GitHub link so I can peek in.</p>\n<h2>Recommendations</h2>\n<p>Finally, here are some utilities I have used in my own personal command-line projects:</p>\n<ul>\n<li><a href=\"https://github.com/yargs/yargs\">yargs</a> – Command-line opt-string parser.</li>\n<li><a href=\"https://github.com/sindresorhus/meow\">meow</a> – Simple command-line helper.</li>\n<li><a href=\"https://github.com/chalk/chalk\">chalk</a> – Terminal string styling.</li>\n</ul>\n<h3>Personal command-line projects</h3>\n<p>Here are some of my personal NodeJS command-line packages:</p>\n<ul>\n<li><a href=\"https://github.com/rmariuzzo/php-array-to-json\">php-array-to-json</a> – Convert PHP configuration array files to JSON files.</li>\n<li><a href=\"https://github.com/rmariuzzo/markdown-swagger\">markdown-swagger</a> – Generate API docs from Swagger to Markdown.</li>\n<li><a href=\"https://github.com/rmariuzzo/spotlight-never-index\">spotlight-never-index</a> – Exclude directories from Spotlight.app.</li>\n</ul>\n<p><strong>Notes</strong>: This guide was cross-posted to <a href=\"https://x-team.com/blog/a-guide-to-creating-a-nodejs-command/\">X-Team</a> and <a href=\"https://medium.com/netscape/a-guide-to-create-a-nodejs-command-line-package-c2166ad0452e\">Netscape</a>.</p>","frontmatter":{"date":"2017-08-18T11:47:25.000Z","slug":"/code/guide-create-a-node-js-command-line-package","title":"Guide: creating a NodeJS command-line package"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"slug":"/lymphoma/2015-09-01"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-03"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-04"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-05"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-07"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-10"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-17"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-18"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-21"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-25"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-03-29"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-04-06"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-04-08"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-04-11"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-04-13"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-04-23"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-04-24"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-04-25"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-04-27"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-05-06"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-05-10"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-05-11"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-05-17"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-05-19"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-05-25"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-01"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-02"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-03"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-06"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-08"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-10-2"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-10"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-12"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-15"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-23"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-06-24"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-07-05"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-07-12-2"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-07-12"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-07-23"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-07-27"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-08-09"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-08-10"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-08-25"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-09-09"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-09-12"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-09-27"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-10-12"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2016-10-28"}}},{"node":{"frontmatter":{"slug":"/code/guide-create-a-node-js-command-line-package"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2018-08-22-2"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2018-08-22"}}},{"node":{"frontmatter":{"slug":"/code/remove-old-node-modules-directories"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2020-12-22"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-02-24"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-03-01"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-03-22"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-03-24"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-05-15"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-05-17"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-06-17"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-07-21"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-08-05"}}},{"node":{"frontmatter":{"slug":"/lymphoma/2021-08-21"}}}]}},"pageContext":{"id":"f40eed45-4072-5ad8-8db9-bfe0a5135e76","frontmatter__slug":"/code/guide-create-a-node-js-command-line-package","__params":{"frontmatter__slug":"code"}}},
    "staticQueryHashes": ["2052298874"]}