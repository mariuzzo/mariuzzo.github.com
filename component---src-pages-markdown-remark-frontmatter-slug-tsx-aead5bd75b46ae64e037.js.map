{"version":3,"sources":["webpack://@rmariuzzo/mariuzzo.com/./node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://@rmariuzzo/mariuzzo.com/./node_modules/date-fns/esm/isValid/index.js","webpack://@rmariuzzo/mariuzzo.com/./node_modules/date-fns/esm/_lib/addLeadingZeros/index.js","webpack://@rmariuzzo/mariuzzo.com/./node_modules/date-fns/esm/formatRFC7231/index.js","webpack://@rmariuzzo/mariuzzo.com/./node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://@rmariuzzo/mariuzzo.com/./node_modules/date-fns/esm/parseISO/index.js","webpack://@rmariuzzo/mariuzzo.com/./node_modules/date-fns/esm/toDate/index.js","webpack://@rmariuzzo/mariuzzo.com/./src/layouts/PostLayout.styles.ts","webpack://@rmariuzzo/mariuzzo.com/./src/layouts/PostLayout.tsx","webpack://@rmariuzzo/mariuzzo.com/./src/pages/{MarkdownRemark.frontmatter__slug}.tsx"],"names":["requiredArgs","required","args","length","TypeError","isValid","dirtyDate","arguments","date","toDate","isNaN","addLeadingZeros","number","targetLength","sign","output","Math","abs","toString","days","months","formatRFC7231","concat","originalDate","RangeError","dayName","getUTCDay","dayOfMonth","getUTCDate","monthName","getUTCMonth","year","getUTCFullYear","hour","getUTCHours","minute","getUTCMinutes","second","getUTCSeconds","toInteger","dirtyNumber","NaN","Number","ceil","floor","MILLISECONDS_IN_HOUR","patterns","dateTimeDelimiter","timeZoneDelimiter","timezone","dateRegex","timeRegex","timezoneRegex","parseISO","argument","dirtyOptions","options","additionalDigits","Object","prototype","call","Date","dateStrings","splitDateString","parseYearResult","parseYear","parseDate","restDateString","offset","timestamp","getTime","time","parseTime","result","setFullYear","setHours","getUTCMilliseconds","parseTimezone","dateString","timeString","array","split","test","substr","token","exec","replace","regex","RegExp","captures","match","parseInt","century","slice","isWeekDate","dayOfYear","parseDateUnit","month","day","week","dayOfWeek","_year","validateWeekDate","isoWeekYear","setUTCFullYear","fourthOfJanuaryDay","diff","setUTCDate","dayOfISOWeekYear","daysInMonths","isLeapYearIndex","validateDate","validateDayOfYearDate","max","value","hours","parseTimeUnit","minutes","seconds","validateTime","parseFloat","timezoneString","_hours","validateTimezone","argStr","console","warn","Error","stack","Container","styled","PostCategory","$theme","up","PostTitle","PageTitle","PostDate","PostContents","TextBlock","attrs","as","PostFooter","previousAndNextLinkStyles","css","PreviousPostLink","Link","NextPostLink","PostLayout","title","category","contents","previousSlug","nextSlug","more","MainLayout","SEO","dangerouslySetInnerHTML","__html","to","data","markdownRemark","allMarkdownRemark","frontmatter","html","categoryId","slug","slugs","edges","map","edge","node","filter","indexOf"],"mappings":"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","file":"component---src-pages-markdown-remark-frontmatter-slug-tsx-aead5bd75b46ae64e037.js","sourcesContent":["export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import toDate from \"../toDate/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name isValid\n * @category Common Helpers\n * @summary Is the given date valid?\n *\n * @description\n * Returns false if argument is Invalid Date and true otherwise.\n * Argument is converted to Date using `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * Invalid Date is a Date, whose time value is NaN.\n *\n * Time value of Date: http://es5.github.io/#x15.9.1.1\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - Now `isValid` doesn't throw an exception\n *   if the first argument is not an instance of Date.\n *   Instead, argument is converted beforehand using `toDate`.\n *\n *   Examples:\n *\n *   | `isValid` argument        | Before v2.0.0 | v2.0.0 onward |\n *   |---------------------------|---------------|---------------|\n *   | `new Date()`              | `true`        | `true`        |\n *   | `new Date('2016-01-01')`  | `true`        | `true`        |\n *   | `new Date('')`            | `false`       | `false`       |\n *   | `new Date(1488370835081)` | `true`        | `true`        |\n *   | `new Date(NaN)`           | `false`       | `false`       |\n *   | `'2016-01-01'`            | `TypeError`   | `false`       |\n *   | `''`                      | `TypeError`   | `false`       |\n *   | `1488370835081`           | `TypeError`   | `true`        |\n *   | `NaN`                     | `TypeError`   | `false`       |\n *\n *   We introduce this change to make *date-fns* consistent with ECMAScript behavior\n *   that try to coerce arguments to the expected type\n *   (which is also the case with other *date-fns* functions).\n *\n * @param {*} date - the date to check\n * @returns {Boolean} the date is valid\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // For the valid date:\n * var result = isValid(new Date(2014, 1, 31))\n * //=> true\n *\n * @example\n * // For the value, convertable into a date:\n * var result = isValid(1393804800000)\n * //=> true\n *\n * @example\n * // For the invalid date:\n * var result = isValid(new Date(''))\n * //=> false\n */\n\nexport default function isValid(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  return !isNaN(date);\n}","export default function addLeadingZeros(number, targetLength) {\n  var sign = number < 0 ? '-' : '';\n  var output = Math.abs(number).toString();\n\n  while (output.length < targetLength) {\n    output = '0' + output;\n  }\n\n  return sign + output;\n}","import toDate from \"../toDate/index.js\";\nimport isValid from \"../isValid/index.js\";\nimport addLeadingZeros from \"../_lib/addLeadingZeros/index.js\";\nvar days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\nvar months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n/**\n * @name formatRFC7231\n * @category Common Helpers\n * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).\n *\n * @description\n * Return the formatted date string in RFC 7231 format.\n * The result will always be in UTC timezone.\n *\n * @param {Date|Number} date - the original date\n * @returns {String} the formatted date string\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `date` must not be Invalid Date\n *\n * @example\n * // Represent 18 September 2019 in RFC 7231 format:\n * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))\n * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'\n */\n\nexport default function formatRFC7231(dirtyDate) {\n  if (arguments.length < 1) {\n    throw new TypeError(\"1 arguments required, but only \".concat(arguments.length, \" present\"));\n  }\n\n  var originalDate = toDate(dirtyDate);\n\n  if (!isValid(originalDate)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var dayName = days[originalDate.getUTCDay()];\n  var dayOfMonth = addLeadingZeros(originalDate.getUTCDate(), 2);\n  var monthName = months[originalDate.getUTCMonth()];\n  var year = originalDate.getUTCFullYear();\n  var hour = addLeadingZeros(originalDate.getUTCHours(), 2);\n  var minute = addLeadingZeros(originalDate.getUTCMinutes(), 2);\n  var second = addLeadingZeros(originalDate.getUTCSeconds(), 2); // Result variables.\n\n  return \"\".concat(dayName, \", \").concat(dayOfMonth, \" \").concat(monthName, \" \").concat(year, \" \").concat(hour, \":\").concat(minute, \":\").concat(second, \" GMT\");\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toInteger from \"../_lib/toInteger/index.js\";\nimport requiredArgs from \"../_lib/requiredArgs/index.js\";\nvar MILLISECONDS_IN_HOUR = 3600000;\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar DEFAULT_ADDITIONAL_DIGITS = 2;\nvar patterns = {\n  dateTimeDelimiter: /[T ]/,\n  timeZoneDelimiter: /[Z ]/i,\n  timezone: /([Z+-].*)$/\n};\nvar dateRegex = /^-?(?:(\\d{3})|(\\d{2})(?:-?(\\d{2}))?|W(\\d{2})(?:-?(\\d{1}))?|)$/;\nvar timeRegex = /^(\\d{2}(?:[.,]\\d*)?)(?::?(\\d{2}(?:[.,]\\d*)?))?(?::?(\\d{2}(?:[.,]\\d*)?))?$/;\nvar timezoneRegex = /^([+-])(\\d{2})(?::?(\\d{2}))?$/;\n/**\n * @name parseISO\n * @category Common Helpers\n * @summary Parse ISO string\n *\n * @description\n * Parse the given string in ISO 8601 format and return an instance of Date.\n *\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n *\n * If the argument isn't a string, the function cannot parse the string or\n * the values are invalid, it returns Invalid Date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The previous `parse` implementation was renamed to `parseISO`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *   parse('2016-01-01')\n *\n *   // v2.0.0 onward\n *   parseISO('2016-01-01')\n *   ```\n *\n * - `parseISO` now validates separate date and time values in ISO-8601 strings\n *   and returns `Invalid Date` if the date is invalid.\n *\n *   ```javascript\n *   parseISO('2018-13-32')\n *   //=> Invalid Date\n *   ```\n *\n * - `parseISO` now doesn't fall back to `new Date` constructor\n *   if it fails to parse a string argument. Instead, it returns `Invalid Date`.\n *\n * @param {String} argument - the value to convert\n * @param {Object} [options] - an object with options.\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = parseISO('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = parseISO('+02014101', { additionalDigits: 1 })\n * //=> Fri Apr 11 2014 00:00:00\n */\n\nexport default function parseISO(argument, dirtyOptions) {\n  requiredArgs(1, arguments);\n  var options = dirtyOptions || {};\n  var additionalDigits = options.additionalDigits == null ? DEFAULT_ADDITIONAL_DIGITS : toInteger(options.additionalDigits);\n\n  if (additionalDigits !== 2 && additionalDigits !== 1 && additionalDigits !== 0) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2');\n  }\n\n  if (!(typeof argument === 'string' || Object.prototype.toString.call(argument) === '[object String]')) {\n    return new Date(NaN);\n  }\n\n  var dateStrings = splitDateString(argument);\n  var date;\n\n  if (dateStrings.date) {\n    var parseYearResult = parseYear(dateStrings.date, additionalDigits);\n    date = parseDate(parseYearResult.restDateString, parseYearResult.year);\n  }\n\n  if (isNaN(date) || !date) {\n    return new Date(NaN);\n  }\n\n  var timestamp = date.getTime();\n  var time = 0;\n  var offset;\n\n  if (dateStrings.time) {\n    time = parseTime(dateStrings.time);\n\n    if (isNaN(time) || time === null) {\n      return new Date(NaN);\n    }\n  }\n\n  if (dateStrings.timezone) {\n    offset = parseTimezone(dateStrings.timezone);\n\n    if (isNaN(offset)) {\n      return new Date(NaN);\n    }\n  } else {\n    var dirtyDate = new Date(timestamp + time); // js parsed string assuming it's in UTC timezone\n    // but we need it to be parsed in our timezone\n    // so we use utc values to build date in our timezone.\n    // Year values from 0 to 99 map to the years 1900 to 1999\n    // so set year explicitly with setFullYear.\n\n    var result = new Date(0);\n    result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());\n    result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());\n    return result;\n  }\n\n  return new Date(timestamp + time + offset);\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {};\n  var array = dateString.split(patterns.dateTimeDelimiter);\n  var timeString; // The regex match should only return at maximum two array elements.\n  // [date], [time], or [date, time].\n\n  if (array.length > 2) {\n    return dateStrings;\n  }\n\n  if (/:/.test(array[0])) {\n    dateStrings.date = null;\n    timeString = array[0];\n  } else {\n    dateStrings.date = array[0];\n    timeString = array[1];\n\n    if (patterns.timeZoneDelimiter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];\n      timeString = dateString.substr(dateStrings.date.length, dateString.length);\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString);\n\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '');\n      dateStrings.timezone = token[1];\n    } else {\n      dateStrings.time = timeString;\n    }\n  }\n\n  return dateStrings;\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var regex = new RegExp('^(?:(\\\\d{4}|[+-]\\\\d{' + (4 + additionalDigits) + '})|(\\\\d{2}|[+-]\\\\d{' + (2 + additionalDigits) + '})$)');\n  var captures = dateString.match(regex); // Invalid ISO-formatted year\n\n  if (!captures) return {\n    year: null\n  };\n  var year = captures[1] && parseInt(captures[1]);\n  var century = captures[2] && parseInt(captures[2]);\n  return {\n    year: century == null ? year : century * 100,\n    restDateString: dateString.slice((captures[1] || captures[2]).length)\n  };\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) return null;\n  var captures = dateString.match(dateRegex); // Invalid ISO-formatted string\n\n  if (!captures) return null;\n  var isWeekDate = !!captures[4];\n  var dayOfYear = parseDateUnit(captures[1]);\n  var month = parseDateUnit(captures[2]) - 1;\n  var day = parseDateUnit(captures[3]);\n  var week = parseDateUnit(captures[4]);\n  var dayOfWeek = parseDateUnit(captures[5]) - 1;\n\n  if (isWeekDate) {\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN);\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek);\n  } else {\n    var date = new Date(0);\n\n    if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN);\n    }\n\n    date.setUTCFullYear(year, month, Math.max(dayOfYear, day));\n    return date;\n  }\n}\n\nfunction parseDateUnit(value) {\n  return value ? parseInt(value) : 1;\n}\n\nfunction parseTime(timeString) {\n  var captures = timeString.match(timeRegex);\n  if (!captures) return null; // Invalid ISO-formatted time\n\n  var hours = parseTimeUnit(captures[1]);\n  var minutes = parseTimeUnit(captures[2]);\n  var seconds = parseTimeUnit(captures[3]);\n\n  if (!validateTime(hours, minutes, seconds)) {\n    return NaN;\n  }\n\n  return hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE + seconds * 1000;\n}\n\nfunction parseTimeUnit(value) {\n  return value && parseFloat(value.replace(',', '.')) || 0;\n}\n\nfunction parseTimezone(timezoneString) {\n  if (timezoneString === 'Z') return 0;\n  var captures = timezoneString.match(timezoneRegex);\n  if (!captures) return 0;\n  var sign = captures[1] === '+' ? -1 : 1;\n  var hours = parseInt(captures[2]);\n  var minutes = captures[3] && parseInt(captures[3]) || 0;\n\n  if (!validateTimezone(hours, minutes)) {\n    return NaN;\n  }\n\n  return sign * (hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE);\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  var date = new Date(0);\n  date.setUTCFullYear(isoWeekYear, 0, 4);\n  var fourthOfJanuaryDay = date.getUTCDay() || 7;\n  var diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;\n  date.setUTCDate(date.getUTCDate() + diff);\n  return date;\n} // Validation functions\n// February is null to handle the leap year (using ||)\n\n\nvar daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || year % 4 === 0 && year % 100;\n}\n\nfunction validateDate(year, month, date) {\n  return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);\n}\n\nfunction validateWeekDate(_year, week, day) {\n  return week >= 1 && week <= 53 && day >= 0 && day <= 6;\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours === 24) {\n    return minutes === 0 && seconds === 0;\n  }\n\n  return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;\n}\n\nfunction validateTimezone(_hours, minutes) {\n  return minutes >= 0 && minutes <= 59;\n}","import requiredArgs from \"../_lib/requiredArgs/index.js\";\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","import styled, { css } from 'styled-components'\nimport { up } from 'styled-breakpoints'\n\nimport { PageTitle, TextBlock } from '../components/Typography'\nimport { Link } from '../components/Link'\nimport { $theme } from '../styles/theme'\n\nexport const Container = styled.div``\n\nexport const PostCategory = styled.div`\n  display: block;\n  color: ${$theme.color.secondary};\n  text-align: center;\n  margin: 1rem 0;\n  font-size: ${$theme.fontSize.l3}rem;\n  font-weight: ${$theme.fontWeight.light};\n\n  ${up('tablet')} {\n    font-size: ${$theme.fontSize.l2}rem;\n    margin: 2rem 0;\n  }\n\n  ${up('desktop')} {\n    margin: 3rem 0;\n  }\n`\n\nexport const PostTitle = styled(PageTitle)``\n\nexport const PostDate = styled.small`\n  display: block;\n  text-align: center;\n  color: ${$theme.color.copyLight};\n`\n\nexport const PostContents = styled(TextBlock).attrs({\n  as: 'article'\n})``\n\nexport const PostFooter = styled.footer`\n  display: grid;\n  grid-template-columns: max-content 1fr max-content;\n  margin-top: 2rem;\n  font-size: ${$theme.fontSize.copy1}rem;\n`\n\nconst previousAndNextLinkStyles = css`\n  text-decoration: none;\n  font-weight: ${$theme.fontWeight.black};\n  color: ${$theme.color.primary};\n\n  &:hover > span {\n    opacity: 1;\n  }\n\n  > span {\n    transition: ${$theme.transition.default};\n    background-color: ${$theme.color.primary};\n    color: ${$theme.color.background};\n    display: inline-block;\n    padding: 0.5em;\n    border-radius: 1px;\n    opacity: 0.5;\n  }\n`\n\nexport const PreviousPostLink = styled(Link)`\n  ${previousAndNextLinkStyles};\n  grid-column: 1;\n\n  > span {\n    margin-right: 0.3em;\n  }\n`\n\nexport const NextPostLink = styled(Link)`\n  ${previousAndNextLinkStyles};\n  grid-column: 3;\n\n  > span {\n    margin-left: 0.3em;\n  }\n`\n","import * as React from 'react'\nimport { formatRFC7231 } from 'date-fns'\n\nimport * as S from './PostLayout.styles'\nimport { MainLayout } from './MainLayout'\nimport { SEO } from '../components/SEO'\n\ntype PostLayoutProps = {\n  title: string\n  date: Date\n  category: string\n  contents: any\n  previousSlug: string\n  nextSlug: string\n}\n\nexport const PostLayout: React.FC<PostLayoutProps> = ({\n  title,\n  date,\n  category,\n  contents,\n  previousSlug,\n  nextSlug,\n  ...more\n}) => {\n  return (\n    <MainLayout {...more}>\n      <SEO title={title} />\n      <S.Container>\n        <S.PostCategory>{category}</S.PostCategory>\n        <S.PostTitle>{title}</S.PostTitle>\n        <S.PostDate>{formatRFC7231(date)}</S.PostDate>\n        <S.PostContents dangerouslySetInnerHTML={{ __html: contents }} />\n        <S.PostFooter>\n          {previousSlug && (\n            <S.PreviousPostLink to={previousSlug}>\n              <span>←</span>\n              Previous\n            </S.PreviousPostLink>\n          )}\n          {nextSlug && (\n            <S.NextPostLink to={nextSlug}>\n              Next\n              <span>→</span>\n            </S.NextPostLink>\n          )}\n        </S.PostFooter>\n      </S.Container>\n    </MainLayout>\n  )\n}\n","import * as React from 'react'\nimport { graphql } from 'gatsby'\nimport { parseISO } from 'date-fns'\n\nimport { PostLayout } from '../layouts/PostLayout'\n\ntype TemplateProps = {\n  data: {\n    markdownRemark: {\n      html: string\n      frontmatter: {\n        date: string\n        slug: string\n        title: string\n      }\n    }\n    allMarkdownRemark: {\n      edges: Array<{\n        node: {\n          frontmatter: {\n            slug: string\n          }\n        }\n      }>\n    }\n  }\n}\n\nconst Template: React.FC<TemplateProps> = ({ data, ...more }) => {\n  const { markdownRemark, allMarkdownRemark } = data\n  const { frontmatter, html } = markdownRemark\n\n  const categoryId = frontmatter.slug.split('/')[1]\n\n  const slugs = allMarkdownRemark.edges\n    .map((edge) => edge.node.frontmatter.slug)\n    .filter((slug) => slug.split('/')[1] === categoryId)\n  const previousSlug = slugs[slugs.indexOf(frontmatter.slug) - 1]\n  const nextSlug = slugs[slugs.indexOf(frontmatter.slug) + 1]\n\n  const category =\n    categoryId === 'lymphoma'\n      ? 'Lymphoma'\n      : categoryId === 'code'\n      ? 'Code'\n      : 'Secret'\n\n  return (\n    <PostLayout\n      {...more}\n      title={frontmatter.title}\n      date={parseISO(frontmatter.date)}\n      category={category}\n      contents={html}\n      previousSlug={previousSlug}\n      nextSlug={nextSlug}\n    />\n  )\n}\n\nexport default Template\n\nexport const pageQuery = graphql`\n  query ($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        date\n        slug\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: ASC }) {\n      edges {\n        node {\n          frontmatter {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}