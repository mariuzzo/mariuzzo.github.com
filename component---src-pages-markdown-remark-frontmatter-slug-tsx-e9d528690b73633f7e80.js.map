{"version":3,"sources":["webpack://@rmariuzzo/mariuzzo.com/./src/layouts/PostLayout.styles.ts","webpack://@rmariuzzo/mariuzzo.com/./src/layouts/PostLayout.tsx","webpack://@rmariuzzo/mariuzzo.com/./src/pages/{MarkdownRemark.frontmatter__slug}.tsx"],"names":["Container","styled","PostCategory","$theme","PostTitle","PostDate","PostContents","PostFooter","previousAndNextLinkStyles","css","PreviousPostLink","Link","NextPostLink","PostLayout","title","date","category","contents","previousSlug","nextSlug","more","MainLayout","dangerouslySetInnerHTML","__html","to","Template","data","markdownRemark","allMarkdownRemark","frontmatter","html","slugs","edges","map","edge","node","slug","indexOf","console","log"],"mappings":"uOAIaA,EAAYC,oBAAH,uEAAGA,CAAH,MAETC,EAAeD,oBAAH,0EAAGA,CAAH,0GAEdE,kBAGIA,qBAKFC,EAAYH,mBAAH,uEAAGA,CAAH,6FACXE,kBAEIA,qBAMFE,EAAWJ,sBAAH,sEAAGA,CAAH,sCAKRK,EAAeL,wBAAH,0EAAGA,CAAH,iSACdE,eAEIA,sBAWFA,qBAmBAI,EAAaN,uBAAH,wEAAGA,CAAH,qGAIRE,uBAGTK,GAA4BC,QAAH,qMAGpBN,oBAOOA,uBACMA,oBACXA,sBAQAO,GAAmBT,QAAOU,KAAV,yFAAGV,CAAH,kDACzBO,GAQSI,GAAeX,QAAOU,KAAV,qFAAGV,CAAH,iDACrBO,G,6ECvFSK,EAAwC,SAAC,GAQ/C,IAPLC,EAOI,EAPJA,MACAC,EAMI,EANJA,KACAC,EAKI,EALJA,SACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,SACGC,GACC,YACJ,OACE,gBAACC,EAAA,EAAeD,EACd,gBAAC,EAAD,KACE,gBAAC,EAAD,KAAiBJ,GACjB,gBAAC,EAAD,KAAcF,GACd,gBAAC,EAAD,KAAaC,GACb,gBAAC,EAAD,CAAgBO,wBAAyB,CAAEC,OAAQN,KACnD,gBAAC,EAAD,KACGC,GACC,gBAAC,EAAD,CAAoBM,GAAIN,GACtB,iCADF,YAKDC,GACC,gBAAC,EAAD,CAAgBK,GAAIL,GAApB,OAEE,sCCnCC,SAASM,EAAT,GAA6B,IAATC,EAAQ,EAARA,KACzBC,EAAsCD,EAAtCC,eAAgBC,EAAsBF,EAAtBE,kBAChBC,EAAsBF,EAAtBE,YAAaC,EAASH,EAATG,KACfC,EAAQH,EAAkBI,MAAMC,KACpC,SAACC,GAAD,OAAUA,EAAKC,KAAKN,YAAYO,QAE5BlB,EAAea,EAAMA,EAAMM,QAAQR,EAAYO,MAAQ,GACvDjB,EAAWY,EAAMA,EAAMM,QAAQR,EAAYO,MAAQ,GAGzD,OADAE,QAAQC,IAAIb,GAEV,gBAACb,EAAD,CACEC,MAAOe,EAAYf,MACnBC,KAAMc,EAAYd,KAClBC,SAAS,SACTC,SAAUa,EACVZ,aAAcA,EACdC,SAAUA","file":"component---src-pages-markdown-remark-frontmatter-slug-tsx-e9d528690b73633f7e80.js","sourcesContent":["import styled, { css } from 'styled-components'\nimport { Link } from '../components/Link'\nimport { $theme } from '../styles/theme'\n\nexport const Container = styled.div``\n\nexport const PostCategory = styled.div`\n  display: block;\n  color: ${$theme.color.primary};\n  text-align: center;\n  margin: 3rem 0;\n  font-size: ${$theme.fontSize.l2.rem}rem;\n  font-weight: 300;\n  opacity: 0.5;\n`\n\nexport const PostTitle = styled.h1`\n  color: ${$theme.color.primary};\n  text-align: center;\n  font-size: ${$theme.fontSize.l1.rem}rem;\n  font-weight: 900;\n  line-height: 1.5em;\n  margin: 0;\n`\n\nexport const PostDate = styled.small`\n  display: block;\n  text-align: center;\n`\n\nexport const PostContents = styled.article`\n  color: ${$theme.color.copy};\n  margin-top: 3rem;\n  font-size: ${$theme.fontSize.copy.rem}rem;\n  font-weight: 400;\n  line-height: 1.5;\n\n  img {\n    display: inline-block;\n    max-width: 100%;\n    width: 100%;\n  }\n\n  a {\n    color: ${$theme.color.secondary};\n    font-weight: 600;\n    text-underline-offset: 3px;\n    text-decoration-thickness: 2px;\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n\n  p {\n    margin: 1.5em 0;\n  }\n\n  strong {\n    font-weight: 900;\n  }\n`\n\nexport const PostFooter = styled.footer`\n  display: grid;\n  grid-template-columns: max-content 1fr max-content;\n  margin-top: 2rem;\n  font-size: ${$theme.fontSize.copy.rem}rem;\n`\n\nconst previousAndNextLinkStyles = css`\n  text-decoration: none;\n  font-weight: 900;\n  color: ${$theme.color.secondary};\n\n  &:hover > span {\n    opacity: 1;\n  }\n\n  > span {\n    transition: ${$theme.transition.default};\n    background-color: ${$theme.color.secondary};\n    color: ${$theme.color.background};\n    display: inline-block;\n    padding: 0.5em;\n    border-radius: 1px;\n    opacity: 0.5;\n  }\n`\n\nexport const PreviousPostLink = styled(Link)`\n  ${previousAndNextLinkStyles};\n  grid-column: 1;\n\n  > span {\n    margin-right: 0.3em;\n  }\n`\n\nexport const NextPostLink = styled(Link)`\n  ${previousAndNextLinkStyles};\n  grid-column: 3;\n\n  > span {\n    margin-left: 0.3em;\n  }\n`\n","import * as React from 'react'\nimport * as S from './PostLayout.styles'\nimport { MainLayout } from './MainLayout'\n\ntype PostLayoutProps = {\n  title: string\n  date: Date\n  category: string\n  contents: any\n  previousSlug: string\n  nextSlug: string\n}\n\nexport const PostLayout: React.FC<PostLayoutProps> = ({\n  title,\n  date,\n  category,\n  contents,\n  previousSlug,\n  nextSlug,\n  ...more\n}) => {\n  return (\n    <MainLayout {...more}>\n      <S.Container>\n        <S.PostCategory>{category}</S.PostCategory>\n        <S.PostTitle>{title}</S.PostTitle>\n        <S.PostDate>{date}</S.PostDate>\n        <S.PostContents dangerouslySetInnerHTML={{ __html: contents }} />\n        <S.PostFooter>\n          {previousSlug && (\n            <S.PreviousPostLink to={previousSlug}>\n              <span>←</span>\n              Previous\n            </S.PreviousPostLink>\n          )}\n          {nextSlug && (\n            <S.NextPostLink to={nextSlug}>\n              Next\n              <span>→</span>\n            </S.NextPostLink>\n          )}\n        </S.PostFooter>\n      </S.Container>\n    </MainLayout>\n  )\n}\n","import * as React from 'react'\nimport { graphql } from 'gatsby'\nimport { PostLayout } from '../layouts/PostLayout'\n\nexport default function Template({ data }) {\n  const { markdownRemark, allMarkdownRemark } = data\n  const { frontmatter, html } = markdownRemark\n  const slugs = allMarkdownRemark.edges.map(\n    (edge) => edge.node.frontmatter.slug\n  )\n  const previousSlug = slugs[slugs.indexOf(frontmatter.slug) - 1]\n  const nextSlug = slugs[slugs.indexOf(frontmatter.slug) + 1]\n\n  console.log(data)\n  return (\n    <PostLayout\n      title={frontmatter.title}\n      date={frontmatter.date}\n      category=\"Cancer\"\n      contents={html}\n      previousSlug={previousSlug}\n      nextSlug={nextSlug}\n    />\n  )\n}\n\nexport const pageQuery = graphql`\n  query ($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      html\n      frontmatter {\n        date\n        slug\n        title\n      }\n    }\n    allMarkdownRemark(sort: { fields: frontmatter___date, order: ASC }) {\n      edges {\n        node {\n          frontmatter {\n            slug\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}