{"version":3,"sources":["webpack://@rmariuzzo/mariuzzo.com/./src/views/CodePostsListView.styles.ts","webpack://@rmariuzzo/mariuzzo.com/./src/views/CodePostsListView.tsx","webpack://@rmariuzzo/mariuzzo.com/./src/pages/code.tsx"],"names":["Title","styled","PageTitle","$theme","PostCardList","PostCardListItem","PostCard","Link","PostCardTitle","PostCardMeta","PostCardDateDistance","CodePostsListView","posts","more","MainLayout","map","post","key","id","to","slug","title","formatRFC7231","date","daysAgo","data","allMarkdownRemark","edges","e","node","frontmatter","parseISO"],"mappings":"yRAMaA,GAAQC,QAAOC,MAAV,oFAAGD,CAAH,eACPE,gBAGEC,EAAeH,mBAAH,gFAAGA,CAAH,wGASZI,EAAmBJ,mBAAH,oFAAGA,CAAH,MAEhBK,GAAWL,QAAOM,KAAV,uFAAGN,CAAH,sKAETE,oBAIIA,uBACLA,eAGSA,kBACIA,mBAIXK,EAAgBP,mBAAH,iFAAGA,CAAH,sDACXE,iBAKFM,EAAeR,oBAAH,gFAAGA,CAAH,MAEZS,EAAuBT,qBAAH,wFAAGA,CAAH,sCAChBE,qBACFA,oB,YC7BFQ,EAAsD,SAAC,GAG7D,IAFLC,EAEI,EAFJA,MACGC,GACC,YACJ,OACE,gBAACC,EAAA,EAAeD,EACd,gBAAC,EAAD,gCACA,gBAAC,EAAD,KACGD,EAAMG,KAAI,SAACC,GAAD,OACT,gBAAC,EAAD,CAAoBC,IAAKD,EAAKE,IAC5B,gBAAC,EAAD,CAAYC,GAAIH,EAAKI,MACnB,gBAAC,EAAD,KAAkBJ,EAAKK,OACvB,gBAAC,EAAD,KACE,gBAAC,EAAD,CAAwBA,OAAOC,OAAcN,EAAKO,QAC/CC,OAAQR,EAAKO,gB,WCwBhC,EAhC0C,SAAC,GAAuB,IAArBE,EAAoB,EAApBA,KAASZ,GAAW,YACzDD,EAAQa,EAAKC,kBAAkBC,MAAMZ,KAAI,SAACa,GAAD,MAAQ,CACrDV,GAAIU,EAAEC,KAAKX,GACXG,MAAOO,EAAEC,KAAKC,YAAYT,MAC1BE,MAAMQ,OAASH,EAAEC,KAAKC,YAAYP,MAClCH,KAAMQ,EAAEC,KAAKC,YAAYV,SAG3B,OAAO,gBAACT,EAAD,iBAAuBE,EAAvB,CAA6BD,MAAOA","file":"component---src-pages-code-tsx-38c17f30e816c3139c29.js","sourcesContent":["import styled from 'styled-components'\n\nimport { Link } from '../components/Link'\nimport { PageTitle } from '../components/Typography'\nimport { $theme } from '../styles/theme'\n\nexport const Title = styled(PageTitle)`\n  color: ${$theme.color.copy};\n`\n\nexport const PostCardList = styled.ol`\n  list-style-type: none;\n  padding: 0;\n  margin: 2rem 0;\n  display: grid;\n  grid-template-columns: 100%;\n  row-gap: 1rem;\n`\n\nexport const PostCardListItem = styled.li``\n\nexport const PostCard = styled(Link)`\n  display: block;\n  border: ${$theme.color.secondary} solid 2px;\n  padding: 1rem;\n  border-radius: 2px;\n  text-decoration: none;\n  transition: ${$theme.transition.default};\n  color: ${$theme.color.copy};\n\n  &:hover {\n    border-color: ${$theme.color.primary};\n    background-color: ${$theme.color.primary}0A;\n  }\n`\n\nexport const PostCardTitle = styled.h3`\n  font-size: ${$theme.fontSize.l3}rem;\n  margin: 0 0 1rem 0;\n  line-height: 1;\n`\n\nexport const PostCardMeta = styled.div``\n\nexport const PostCardDateDistance = styled.span`\n  font-weight: ${$theme.fontWeight.light};\n  font-size: ${$theme.fontSize.copy2}rem;\n`\n","import * as React from 'react'\nimport { formatRFC7231 } from 'date-fns'\n\nimport { MainLayout } from '../layouts/MainLayout'\nimport { daysAgo } from '../utils/date'\n\nimport * as S from './CodePostsListView.styles'\n\ntype CodePostsListViewProps = {\n  posts: Array<{\n    id: string\n    title: string\n    date: Date\n    slug: string\n  }>\n}\n\nexport const CodePostsListView: React.FC<CodePostsListViewProps> = ({\n  posts,\n  ...more\n}) => {\n  return (\n    <MainLayout {...more}>\n      <S.Title>Recent posts about code</S.Title>\n      <S.PostCardList>\n        {posts.map((post) => (\n          <S.PostCardListItem key={post.id}>\n            <S.PostCard to={post.slug}>\n              <S.PostCardTitle>{post.title}</S.PostCardTitle>\n              <S.PostCardMeta>\n                <S.PostCardDateDistance title={formatRFC7231(post.date)}>\n                  {daysAgo(post.date)}\n                </S.PostCardDateDistance>\n              </S.PostCardMeta>\n            </S.PostCard>\n          </S.PostCardListItem>\n        ))}\n      </S.PostCardList>\n    </MainLayout>\n  )\n}\n","import { graphql } from 'gatsby'\nimport * as React from 'react'\nimport { parseISO } from 'date-fns'\n\nimport { CodePostsListView } from '../views/CodePostsListView'\n\ntype CodePageProps = {\n  data: {\n    allMarkdownRemark: {\n      edges: Array<{\n        node: {\n          id: string\n          frontmatter: {\n            date: string\n            slug: string\n            title: string\n          }\n        }\n      }>\n    }\n  }\n}\n\nconst CodePage: React.FC<CodePageProps> = ({ data, ...more }) => {\n  const posts = data.allMarkdownRemark.edges.map((e) => ({\n    id: e.node.id,\n    title: e.node.frontmatter.title,\n    date: parseISO(e.node.frontmatter.date),\n    slug: e.node.frontmatter.slug\n  }))\n\n  return <CodePostsListView {...more} posts={posts} />\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { frontmatter: { slug: { regex: \"/^/code//\" } } }\n      sort: { fields: frontmatter___date, order: DESC }\n      limit: 10\n    ) {\n      edges {\n        node {\n          id\n          frontmatter {\n            date\n            slug\n            title\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default CodePage\n"],"sourceRoot":""}